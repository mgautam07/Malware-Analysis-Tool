from tkinter import *
from tkinter import filedialog
from extractor import predict_file
import ttkbootstrap as tb
import os
import hashlib


root = tb.Window(themename="cosmo")
root.title("Malware Analysis Tool")
img = PhotoImage(file='assets/logo.png')
root.iconphoto(False, img)

# Set the size of the window
root.geometry("800x600")

# Function to analyze the selected file
def analyze_file(file_path):
    # Get file information
    file_size = os.path.getsize(file_path)
    file_hash = hashlib.md5(open(file_path, 'rb').read()).hexdigest()
    file_type = "File type"
    author = "File author"
    prediction = predict_file(file_path)

    # Display the file information
    author_label.config(text="Author: " + author, fg="blue")
    hash_label.config(text="Hash: " + file_hash, fg="blue")
    type_label.config(text="Type: " + file_type, fg="blue")
    size_label.config(text="Size: " + str(file_size) + " bytes", fg="blue")
    prediction_label.config(text="Prediction: " + ['Malicious', 'Legitimate', 'Error'][prediction], fg="blue")

# Function to select a file for analysis
def select_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        file_label.config(text="Selected file: " + file_path)

        # Call the analyze_file function with the selected file path
        analyze_file(file_path)

# Create the UI elements
file_frame = Frame(root, padx=10, pady=10)
file_frame.pack(fill=X)

file_button = Button(file_frame, text="Select File", command=select_file)
file_button.pack(side=LEFT)

file_label = Label(file_frame, text="No file selected")
file_label.pack(side=LEFT, padx=10)

result_frame = Frame(root, padx=10, pady=10)
result_frame.pack(fill=X)

result_label = Label(result_frame, text="Analysis result")
result_label.pack(side=LEFT)

info_frame = Frame(root, padx=10, pady=10)
info_frame.pack(fill=X)

author_label = Label(info_frame, text="Author: ", fg="red")
author_label.pack(side=TOP, anchor=W)

hash_label = Label(info_frame, text="Hash: ", fg="red")
hash_label.pack(side=TOP, anchor=W)

type_label = Label(info_frame, text="Type: ", fg="red")
type_label.pack(side=TOP, anchor=W)

size_label = Label(info_frame, text="Size: ", fg="red")
size_label.pack(side=TOP, anchor=W)

prediction_label = Label(info_frame, text="Prediction: ")
prediction_label.pack(side=TOP, anchor=W)
root.mainloop()